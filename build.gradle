// Would do the ID way but spring boot isnt part of the plugins repo.
buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
    classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0"
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: "org.unbroken-dome.test-sets"

// Version of the application
group = 'com.disney.studios'
version = '0.1.1'

// Our version compatibilities
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Needed for keeping integration tests separate
testSets {
    integrationTest
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

// Scope needed for when we do dynmaic boot runs
configurations {
    dev
}

// Repos
repositories {
    mavenCentral()
}


dependencies {
    // Needed spring boot dependencies
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    // Needed for the h2 database
    compile("com.h2database:h2")

    // For develoment with
    dev("org.springframework.boot:spring-boot-devtools")

    // For test framework
    testCompile("org.springframework.boot:spring-boot-starter-test")
    // needed for having groovy tests
    testCompile "org.codehaus.groovy:groovy-all:2.4.7"

    // for mock testing with mockito
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.hamcrest:hamcrest-library:1.3"
}

// This is used to add the dev tools.
// When adding the test tools we are able to reload while compiling without restarting
bootRun {
    classpath = sourceSets.main.runtimeClasspath + configurations.dev
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

// For IntelliJ Integration
// I believe this is needed for all the integration source tests to show up on iNtelliJ
apply plugin: 'idea'
idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.allSource.srcDirs.flatten()
        scopes.TEST.plus += [configurations.integrationTestCompile]
    }
}
